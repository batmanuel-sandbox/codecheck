# 
# LSST Data Management System
# Copyright 2008, 2009 LSST Corporation.
# 
# This product includes software developed by the
# LSST Project (http://www.lsst.org/).
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the LSST License Statement and 
# the GNU General Public License along with this program.  If not, 
# see <http://www.lsstcorp.org/LegalNotices/>.
#


# lint Python modules using external checkers.
# 
# This is the main checker controlling the other ones and the reports
# generation. It is itself both a raw checker and an astng checker in order
# to:
# * handle message activation / deactivation at the module level
# * handle some basic but necessary stats'data (number of classes, methods...)
# 
[MASTER]

# Specify a configuration file.
#rcfile=

# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
#init-hook=

# Profiled execution.
profile=no

# Add <file or directory> to the black list. It should be a base name, not a
# path. You may set this option multiple times.
ignore=.svn
ignore=.svn_temp
ignore=imageLib.py
ignore=imageLib

# Pickle collected data for later comparisons.
persistent=yes

# Set the cache size for astng objects.
cache-size=500

# List of plugins (as comma separated values of python modules names) to load,
# usually to register additional checkers.
load-plugins=


[MESSAGES CONTROL]

# Enable only checker(s) with the given id(s). This option conflicts with the
# disable-checker option
#enable-checker=

# Enable all checker(s) except those with the given id(s). This option
# conflicts with the enable-checker option
#disable-checker=

# Enable all messages in the listed categories.
#enable-msg-cat=

# Disable all messages in the listed categories.
#disable-msg-cat=

# Enable the message(s) with the given id(s).
#enable-msg=

# Disable the message(s) with the given id(s).
# Ignore: C0111 "Missing docstring"
# Ignore: R0201 "Method could be a function (self not used in method body)"
# Ignore: R0902 "Too many instance attributes (%s/%s)"
# Ignore: R0904 "Too many public methods (%s/%s)"
# Ignore: R0912 "Too many branches (%s/%s)"
# Ignore: R0913 "Too many arguments (%s/%s)"
# Ignore: R0914 "Too many local variables (%s/%s)"
# Ignore: R0915 "Too many statements (%s/%s)"
# Ignore: W0142 "Used * or ** magic"
# Ignore: E0611 "No name 'pex' in module 'lsst'" (import lsst.pex.policy as policy)
# Ignore: F0401 "Unable to import 'lsst.pex.policy' (No module named pex)"
# Ignore: E1101 "Module 'lsst' has no 'pex' member"
# Ignore: W0614 "Unused import %s from wildcard import"

disable-msg=C0111,R0201,R0902,R0904,R0912,R0913,R0914,R0915,W0142,E0611,F0401,E1101,W0614



[REPORTS]

# Set the output format. Available formats are text, parseable, colorized, msvs
# (visual studio) and html
output-format=parseable

# Include message's id in output
include-ids=yes

# Put messages in a separate file for each module / package specified on the
# command line instead of printing them on stdout. Reports (if any) will be
# written in a file name "pylint_global.[txt|html]".
files-output=no

# Tells wether to display a full report or only the messages
reports=no

# Python expression which should return a note less than 10 (10 is the highest
# note). You have access to the variables errors warning, statement which
# respectivly contain the number of errors / warnings messages and the total
# number of statements analyzed. This is used by the global evaluation report
# (R0004).
evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)

# Add a comment according to your evaluation note. This is used by the global
# evaluation report (R0004).
comment=no

# Enable the report(s) with the given id(s).
#enable-report=

# Disable the report(s) with the given id(s).
#disable-report=


# try to find bugs in the code using type inference
# 
[TYPECHECK]

# Tells wether missing members accessed in mixin class should be ignored. A
# mixin class is detected if its name ends with "mixin" (case insensitive).
ignore-mixin-members=yes

# List of classes names for which member attributes should not be checked
# (useful for classes with attributes dynamicaly set).
ignored-classes=SQLObject

# When zope mode is activated, add a predefined set of Zope acquired attributes
# to generated-members.
zope=no

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E0201 when accessed.
generated-members=REQUEST,acl_users,aq_parent


# checks for
# * unused variables / imports
# * undefined variables
# * redefinition of variable from builtins or from an outer scope
# * use of variable before assigment
# 
[VARIABLES]

# Tells wether we should check for unused import in __init__ files.
init-import=yes

# A regular expression matching names used for dummy variables (i.e. not used).
dummy-variables-rgx=_|dummy

# List of additional names supposed to be defined in builtins. Remember that
# you should avoid to define new builtins when possible.
additional-builtins=


# checks for :
# * doc strings
# * modules / classes / functions / methods / arguments / variables name
# * number of arguments, local variables, branchs, returns and statements in
# functions, methods
# * required module attributes
# * dangerous default values as arguments
# * redefinition of function / method / class
# * uses of the global statement
# 
[BASIC]

# Required attributes for module, separated by a comma
required-attributes=

# Regular expression which should only match functions or classes name which do
# not require a docstring
no-docstring-rgx=__.*__

# Regular expression which should only match correct module names
# LSST Rule:  camelCase with leading lc  with leading/trailing '_' decoration.
# accept: python/lsst/afw/display/) __init__.py
# accept: python/lsst/afw/display/) utils.py
# accept: (python/lsst/afw/display/) displayLib.py
# No: minimize_2.py
# No: (tests/) SourceToDiaSource.py
module-rgx=(([a-z][a-zA-Z0-9]*)|(__.*__))$

# Regular expression which should only match correct module level names
#const-rgx=(([a-z][a-zA-Z0-9]*)|(__.*__))$
#const-rgx=((A-Z][A-Z0-9_]*)|(__.*__))$  constants: UC with '_' word separators
# accept: __init__
# accept: _siCopy1 _si2Copy
# accept: MAX_WIDTH_1
const-rgx=(([A-Z][A-Z_]*)|(_?[a-z][A-Za-z0-9]*)|(__.*__))$

# Regular expression which should only match correct class names
# accept: FindDogs
# accept: _Find2Cats
# accept: _F
# accept: F
# accept: LogHTTP
class-rgx=_?[A-Z][a-zA-Z0-9]*$

# Regular expression which should only match correct function names
#function-rgx=[a-z][a-zA-Z0-9]*$  public function names
#function-rgx=_?[a-z][a-zA-Z0-9]*$  non-public function names
# accept: findDogs
# accept: _find2Cats
# accept: _f
# accept: f
# accept: logHTTP
function-rgx=_?[a-z][a-zA-Z0-9]*$

# Regular expression which should only match correct method names
#method-rgx=[a-z][a-zA-Z0-9]*$  public method names
#method-rgx=_?[a-z][a-zA-Z0-9]*$  non-public method names
#method-rgx=__[a-z]+__$  reserved method names
method-rgx=((_?[a-z][a-zA-Z0-9]*)|(__[a-z]+__))$

# Regular expression which should only match correct instance attribute names
#attr-rgx=[a-z][a-zA-Z0-9]*$     public attributes
#attr-rgx=[a-z][a-zA-Z0-9]*_?$   public attributes colliding with reserved word
#attr-rgx=__[a-z][a-zA-Z0-9]*$   subclassed but 'private' attributes
#attr-rgx=_[a-z][a-zA-Z0-9]*$   non-public method and instance variables
# accept: findDogs  | findDogs_ | _findDogs  | __findDogs
attr-rgx=(([a-z][a-zA-Z0-9]*_?)|(__?[a-z][a-zA-Z0-9]*))$

# Regular expression which should only match correct argument names
# TBD::: Probably need to include constants and classes
argument-rgx=(([a-z][a-zA-Z0-9]*)|([A-Z][A-Z_]*))$

# Regular expression which should only match correct variable names
variable-rgx=[a-z][a-zA-Z0-9]*$

# Regular expression which should only match correct list comprehension /
# generator expression variable names
inlinevar-rgx=[A-Za-z][A-Za-z0-9]*$

# Good variable names which should always be accepted, separated by a comma
good-names=i,j,k

# Bad variable names which should always be refused, separated by a comma
bad-names=l,O,I

# List of builtins function names that should not be used, separated by a comma
bad-functions=map,filter,apply,input,lambda


# checks for sign of poor/misdesign:
# * number of methods, attributes, local variables...
# * size, complexity of functions, methods
# 
[DESIGN]

# Maximum number of arguments for function / method
max-args=5

# Maximum number of locals for function / method body
max-locals=15

# Maximum number of return / yield for function / method body
max-returns=6

# Maximum number of branch for function / method body
max-branchs=12

# Maximum number of statements in function / method body
max-statements=50

# Maximum number of parents for a class (see R0901).
max-parents=7

# Maximum number of attributes for a class (see R0902).
max-attributes=7

# Minimum number of public methods for a class (see R0903).
min-public-methods=2

# Maximum number of public methods for a class (see R0904).
max-public-methods=20


# checks for
# * external modules dependencies
# * relative / wildcard imports
# * cyclic imports
# * uses of deprecated modules
# 
[IMPORTS]

# Deprecated modules which should not be used, separated by a comma
deprecated-modules=regsub,string,TERMIOS,Bastion,rexec

# Create a graph of every (i.e. internal and external) dependencies in the
# given file (report R0402 must not be disabled)
#import-graph=

# Create a graph of external dependencies in the given file (report R0402 must
# not be disabled)
#ext-import-graph=

# Create a graph of internal dependencies in the given file (report R0402 must
# not be disabled)
#int-import-graph=


# checks for :
# * methods without self as first argument
# * overridden methods signature
# * access only to existant members via self
# * attributes not defined in the __init__ method
# * supported interfaces implementation
# * unreachable code
# 
[CLASSES]

# List of interface methods to ignore, separated by a comma. This is used for
# instance to not check methods defines in Zope's Interface base class.
ignore-iface-methods=isImplementedBy,deferred,extends,names,namesAndDescriptions,queryDescriptionFor,getBases,getDescriptionFor,getDoc,getName,getTaggedValue,getTaggedValueTags,isEqualOrExtendedBy,setTaggedValue,isImplementedByInstancesOf,adaptWith,is_implemented_by

# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods=__init__,__new__,setUp


# checks for:
# * warning notes in the code like FIXME, XXX
# * PEP 263: source code with non ascii character but no encoding declaration
# 
[MISCELLANEOUS]

# List of note tags to take in consideration, separated by a comma.
notes=FIXME,XXX,TODO


# checks for similarities and duplicated code. This computation may be
# memory / CPU intensive, so you should disable it if you experiments some
# problems.
# 
[SIMILARITIES]

# Minimum lines number of a similarity.
min-similarity-lines=4

# Ignore comments when computing similarities.
ignore-comments=yes

# Ignore docstrings when computing similarities.
ignore-docstrings=yes


# checks for :
# * unauthorized constructions
# * strict indentation
# * line length
# * use of <> instead of !=
# 
[FORMAT]

# Maximum number of characters on a single line.
max-line-length=110

# Maximum number of lines in a module
max-module-lines=1000

# String used as indentation unit. This is usually " " (4 spaces) or "\t" (1
# tab).
indent-string='    '
